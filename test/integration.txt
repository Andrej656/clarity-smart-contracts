import * as fs from "fs";
import {
  makeSmartContractDeploy,
  makeContractCall,
  TransactionVersion,
  BufferCV
} from "@blockstack/stacks-transactions";
import * as BigNum from "bn";

let privKeyString =
  "edf9aee84d9b7abc145504dde6726c64f369d37ee34ded868fabd876c26570bc";
let pubKeyString =
  "04ef788b3830c00abe8f64f62dc32fc863bc0b2cafeb073b6c8e1c7657d9c2c3ab" +
  "5b435d20ea91337cdd8c30dd7427bb098a5355e9c9bfad43797899b8137237cf";

let contractName = "oi-license";
let code = fs.readFileSync("./contracts/license/license.clar").toString();

let feeRate = BigNum.ZERO;
let nonce = BigNum.ZERO;
let secretKey =
  "951143ef991232ff707d2018f8abfc855cbc50fb983e4ea08628079a6faa553a01";

let transaction = makeSmartContractDeploy(
  contractName,
  code,
  feeRate,
  nonce,
  secretKey,
  TransactionVersion.Mainnet
);
console.log(transaction.serialize().toString("hex"));

var contractAddress = "SPBMRFRPPGCDE3F384WCJPK8PQJGZ8K9QKK7F59X";
var functionName = "buy-non-expiring";
var buffer = Buffer.from("");
var bufferClarityValue = new BufferCV(buffer);
var functionArgs = [bufferClarityValue];

feeRate = BigNum.ZERO;
nonce = BigNum.ONE;

transaction = makeContractCall(
  contractAddress,
  contractName,
  functionName,
  functionArgs,
  feeRate,
  nonce,
  secretKey,
  TransactionVersion.Testnet
);

console.log(transaction.serialize().toString("hex"));

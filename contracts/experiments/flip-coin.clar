;; A simple flip coin betting game.
;;
;; For more details see docs/flip-coin.md

;; storage
(define-map gamblers ((height uint) (value bool)) ((principal principal) (amount uint)))
(define-map amounts ((height uint)) ((amount uint)))

(define-data-var pending-payout (optional uint) none)
(define-data-var jackpot uint u0)

(define-constant err-bet-exists u10)

;; used in (fold) to get last item of a buffer
(define-private (last (item (buff 1)) (value  (buff 1)))
   item
)

;; check whether the character is even
(define-private (even (value (buff 1)))
  (or
   (is-eq value 0xfe)
   (is-eq value 0xfd)
   (is-eq value 0xfc)
   (is-eq value 0xfa)
   (is-eq value 0xf8)
   (is-eq value 0xf6)
   (is-eq value 0xf4)
   (is-eq value 0xf2)
   (is-eq value 0xf0)
   (is-eq value 0xde)
   (is-eq value 0xdd)
   (is-eq value 0xdc)
   (is-eq value 0xda)
   (is-eq value 0xd8)
   (is-eq value 0xd6)
   (is-eq value 0xd4)
   (is-eq value 0xd2)
   (is-eq value 0xd0)
   (is-eq value 0xce)
   (is-eq value 0xcd)
   (is-eq value 0xcc)
   (is-eq value 0xca)
   (is-eq value 0xc8)
   (is-eq value 0xc6)
   (is-eq value 0xc4)
   (is-eq value 0xc2)
   (is-eq value 0xc0)
   (is-eq value 0xbe)
   (is-eq value 0xbd)
   (is-eq value 0xbc)
   (is-eq value 0xba)
   (is-eq value 0xb8)
   (is-eq value 0xb6)
   (is-eq value 0xb4)
   (is-eq value 0xb2)
   (is-eq value 0xb0)
   (is-eq value 0xae)
   (is-eq value 0xad)
   (is-eq value 0xac)
   (is-eq value 0xaa)
   (is-eq value 0xa8)
   (is-eq value 0xa6)
   (is-eq value 0xa4)
   (is-eq value 0xa2)
   (is-eq value 0xa0)
   (is-eq value 0x9e)
   (is-eq value 0x9d)
   (is-eq value 0x9c)
   (is-eq value 0x9a)
   (is-eq value 0x98)
   (is-eq value 0x96)
   (is-eq value 0x94)
   (is-eq value 0x92)
   (is-eq value 0x90)
   (is-eq value 0x8e)
   (is-eq value 0x8d)
   (is-eq value 0x8c)
   (is-eq value 0x8a)
   (is-eq value 0x88)
   (is-eq value 0x86)
   (is-eq value 0x84)
   (is-eq value 0x82)
   (is-eq value 0x80)
   (is-eq value 0x7e)
   (is-eq value 0x7d)
   (is-eq value 0x7c)
   (is-eq value 0x7a)
   (is-eq value 0x78)
   (is-eq value 0x76)
   (is-eq value 0x74)
   (is-eq value 0x72)
   (is-eq value 0x70)
   (is-eq value 0x6e)
   (is-eq value 0x6d)
   (is-eq value 0x6c)
   (is-eq value 0x6a)
   (is-eq value 0x68)
   (is-eq value 0x66)
   (is-eq value 0x64)
   (is-eq value 0x62)
   (is-eq value 0x60)
   (is-eq value 0x5e)
   (is-eq value 0x5d)
   (is-eq value 0x5c)
   (is-eq value 0x5a)
   (is-eq value 0x58)
   (is-eq value 0x56)
   (is-eq value 0x54)
   (is-eq value 0x52)
   (is-eq value 0x50)
   (is-eq value 0x4e)
   (is-eq value 0x4d)
   (is-eq value 0x4c)
   (is-eq value 0x4a)
   (is-eq value 0x48)
   (is-eq value 0x46)
   (is-eq value 0x44)
   (is-eq value 0x42)
   (is-eq value 0x40)
   (is-eq value 0x3e)
   (is-eq value 0x3d)
   (is-eq value 0x3c)
   (is-eq value 0x3a)
   (is-eq value 0x38)
   (is-eq value 0x36)
   (is-eq value 0x34)
   (is-eq value 0x32)
   (is-eq value 0x30)
   (is-eq value 0x2e)
   (is-eq value 0x2d)
   (is-eq value 0x2c)
   (is-eq value 0x2a)
   (is-eq value 0x28)
   (is-eq value 0x26)
   (is-eq value 0x24)
   (is-eq value 0x22)
   (is-eq value 0x20)
   (is-eq value 0x1e)
   (is-eq value 0x1d)
   (is-eq value 0x1c)
   (is-eq value 0x1a)
   (is-eq value 0x18)
   (is-eq value 0x16)
   (is-eq value 0x14)
   (is-eq value 0x12)
   (is-eq value 0x10)
   (is-eq value 0x0e)
   (is-eq value 0x0c)
   (is-eq value 0x0a)
   (is-eq value 0x08)
   (is-eq value 0x06)
   (is-eq value 0x04)
   (is-eq value 0x02)
   (is-eq value 0x00)
  )
)

;; flip coin by looking at the hash at the given block
;; returns true if the last byte of the hash is even
(define-private (flip-coin-at (height uint))
  (let ((hash (unwrap-panic (get-block-info? header-hash height))))
    (let ((last-value  (fold last hash "0")))
    (is-eq (len (filter even last-value)) u1)
  ))
)

;; returns the random value based on the previous block
(define-read-only (flip-coin)
  (flip-coin-at (- block-height u1))
)

;; returns how much stx were bet at the given block
(define-read-only (get-jackpot)
  (var-get jackpot)
)

;; returns how much stx were bet at the given block
(define-read-only (get-amount-at (height uint))
  (match (map-get? amounts ((height height)))
    amount (get amount amount)
    u0
  )
)

;; returns the winner at the given block. If there was no winner `(none)` is returned
(define-read-only (get-optional-winner-at (height uint))
  (match (map-get? gamblers ((height height) (value (flip-coin-at (+ height u1)))))
    gambler (some (get principal gambler))
    none
  )
)

;; pays the bet amount at the given block plus the jackpot
(define-private (payout (height (optional uint)))
 (match height
  some-height (if (is-eq block-height some-height)
    true
    (begin
      (match (get-optional-winner-at some-height)
        winner (begin
          (unwrap-panic (print (as-contract (stx-transfer? (+ (var-get jackpot) (get-amount-at some-height)) tx-sender winner))))
          (var-set jackpot u0)
          )
        (var-set jackpot (+ (var-get jackpot) (get-amount-at some-height)))
      )
      (var-set pending-payout none)
    ))
  true
 )
)

;; bet 1000 mSTX on the given value. Only one user can bet on that value for each block.
;; if payout needs to be done then this function call will do it (note that the caller
;; needs to provide corresponding post conditions)
(define-public (bet (value bool))
  (let ((amount u1000))
    (begin
      (payout (var-get pending-payout))
      (if (map-insert gamblers ((height block-height) (value value)) ((amount amount) (principal tx-sender)))
        (match (stx-transfer? amount tx-sender (as-contract tx-sender))
          success (begin
            (map-set amounts ((height block-height))  ((amount (+ (get-amount-at block-height) amount))))
            (var-set pending-payout (some block-height))
            (ok block-height)
          )
          error (err error)
        )
        (err err-bet-exists)
      )
    )
  )
)
